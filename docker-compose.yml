version: '3.6'

volumes:
    kong_data: {}

networks:
  cgi-net:
    external: false
    name: cgi-net
  inter-net:
    external: false
    name: inter-net

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongdb
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    networks:
      - cgi-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 2s
  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongdb
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    networks:
      - cgi-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 2s
  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    container_name: kong
    user: "${KONG_USER:-kong}"
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: kongdb
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongdb
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - cgi-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
  kongdb:
    image: postgres:9.5
    container_name: kongdb
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    stdin_open: true
    tty: true
    networks:
      - cgi-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    container_name: konga
    environment:
      - NODE_ENV=production
    networks:
      - cgi-net
    ports:
      - "1337:1337"
    depends_on:
      - kongdb
      - kong
    links:
      - kongdb
      - kong
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://kafka:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - ./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - inter-net
    ports:
      - "9094:9094"
    depends_on:
      - zookeeper
    links:
      - zookeeper
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    volumes:
      - ./zk-single-kafka-single/zoo1/data:/data
      - ./zk-single-kafka-single/zoo1/datalog:/datalog
    networks:
      - inter-net
    # ports:
    #   - "2181:2181"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s